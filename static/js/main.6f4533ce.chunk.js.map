{"version":3,"sources":["store/ActionTypes.ts","store/actions.ts","store/selectors.ts","components/Todo/Todo.tsx","components/TodoList/TodoList.tsx","api/api.ts","App.tsx","store/index.ts","index.tsx"],"names":["ActionTypes","setTodos","createAction","SET_TODOS","setUsers","SET_USERS","getTodos","initialState","todos","getUsers","users","Todo","todo","useSelector","dispatch","useDispatch","useState","formEditToggler","setFormEditToggler","title","todoTitle","setTodoTitle","completed","checked","setCheked","date","Date","toUTCString","toString","useEffect","className","classNames","onSubmit","event","todoitem","preventDefault","map","todoItem","id","editFormSubmit","htmlFor","type","value","onChange","target","onClick","find","user","userId","name","defaultChecked","filter","TodoList","BASE_URL","getTodosFromServer","a","fetch","todosFromServer","json","getUsersFromServer","usersFromServer","App","setName","setCompleted","setTitle","formAddToggler","setFormAddToggler","getAllTodos","getAllUsers","datetime","userInside","newUser","length","undefined","addTodo","placeholder","required","reducer","createReducer","builder","addCase","state","action","payload","store","configureStore","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.6f4533ce.chunk.js","sourcesContent":["/* eslint-disable no-shadow */\nexport enum ActionTypes {\n  SET_TODOS = 'SET_TODOS',\n  SET_USERS = 'SET_USERS',\n}\n","import { createAction } from '@reduxjs/toolkit';\n// eslint-disable-next-line import/extensions, import/no-unresolved\nimport { TodoItem, UserItem } from '../react-app-env';\nimport { ActionTypes } from './ActionTypes';\n\nexport const setTodos = createAction<TodoItem[]>(ActionTypes.SET_TODOS);\nexport const setUsers = createAction<UserItem[]>(ActionTypes.SET_USERS);\n","/* eslint-disable import/extensions */\n/* eslint-disable import/no-unresolved */\nimport { State } from '../react-app-env';\n\nexport const getTodos = (initialState: State) => initialState.todos;\nexport const getUsers = (initialState: State) => initialState.users;\n","/* eslint-disable comma-dangle */\n/* eslint-disable jsx-a11y/label-has-associated-control */\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport classNames from 'classnames';\nimport './Todo.scss';\n// eslint-disable-next-line import/extensions, import/no-unresolved\nimport { TodoItem, UserItem } from '../../react-app-env';\nimport { getTodos, getUsers } from '../../store/selectors';\nimport { setTodos } from '../../store/actions';\n\ninterface Props {\n  todo: TodoItem;\n}\n\nconst Todo: React.FC<Props> = ({ todo }) => {\n  const users: UserItem[] = useSelector(getUsers);\n  const todos: TodoItem[] = useSelector(getTodos);\n  const dispatch = useDispatch();\n  const [formEditToggler, setFormEditToggler] = useState<boolean>(false);\n  const [todoTitle, setTodoTitle] = useState<string>(todo.title);\n  const [checked, setCheked] = useState<boolean>(todo.completed);\n  const date = new Date().toUTCString().toString();\n\n  const editFormSubmit = (\n    event: React.FormEvent<HTMLFormElement>,\n    todoitem: TodoItem\n  ) => {\n    event.preventDefault();\n\n    dispatch(\n      setTodos(\n        todos.map((todoItem: TodoItem) => {\n          if (todoItem.id === todoitem.id) {\n            return {\n              ...todo,\n              title: todoTitle,\n              date,\n            };\n          }\n\n          return todoItem;\n        })\n      )\n    );\n\n    setFormEditToggler(false);\n  };\n\n  const deleteTodo = (id: number) => {\n    dispatch(\n      setTodos(todos.filter((todoitem: TodoItem) => todoitem.id !== id))\n    );\n  };\n\n  const completedTodo = (id: number) => {\n    dispatch(\n      setTodos(\n        todos.map((todoitem: TodoItem) => {\n          if (todoitem.id === id) {\n            return {\n              ...todo,\n              completed: checked,\n              date,\n            };\n          }\n\n          return todoitem;\n        })\n      )\n    );\n  };\n\n  useEffect(() => {}, []);\n\n  return (\n    <li className=\"todos__item column card-content m-2 box is-one-quarter\">\n      <form\n        className={classNames('todos__form-edit', {\n          'todos__form-edit--unactive': formEditToggler === false,\n        })}\n        onSubmit={(event) => editFormSubmit(event, todo)}\n      >\n        <div>\n          <label htmlFor=\"title\">\n            <p className=\"p-2\">Change the title</p>\n            <input\n              className=\"input is-primary\"\n              id=\"title\"\n              type=\"text\"\n              value={todoTitle}\n              onChange={(event) => setTodoTitle(event.target.value)}\n            />\n          </label>\n          <button\n            className=\"todos__form-edit__submit button is-success is-light\"\n            type=\"submit\"\n          >\n            Submit\n          </button>\n        </div>\n        <button\n          onClick={() => setFormEditToggler(!formEditToggler)}\n          className=\"todos__form-edit__close\"\n          type=\"button\"\n        >\n          Close\n        </button>\n      </form>\n      <div className=\"is-flex is-flex-direction-column is-justify-content-space-between\">\n        <p>\n          <b>{users.find((user) => user.id === todo.userId)?.name}</b>\n        </p>\n        <p className=\"todos__title pb-4\">{todo.title}</p>\n        <div>\n          {' '}\n          <input\n            className=\"checkbox\"\n            type=\"checkbox\"\n            name=\"completed\"\n            defaultChecked={checked}\n            id={`${todo.id}`}\n            onClick={() => {\n              setCheked(!checked);\n              completedTodo(todo.id);\n            }}\n          />\n          <label htmlFor={`${todo.id}`}> Completed</label>\n        </div>\n        <p className=\"subtitle is-7\">\n          <i>{todo.date}</i>\n        </p>\n      </div>\n\n      <div className=\"todos__button-box\">\n        <button\n          className=\"todos__edit\"\n          type=\"button\"\n          onClick={() => {\n            setFormEditToggler(true);\n          }}\n        >\n          Edit\n        </button>\n        <button\n          className=\"todos__delete\"\n          type=\"button\"\n          onClick={() => deleteTodo(todo.id)}\n        >\n          Delete\n        </button>\n      </div>\n    </li>\n  );\n};\n\nexport default Todo;\n","import React, { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { getTodos } from '../../store/selectors';\nimport Todo from '../Todo/Todo';\n\nconst TodoList: React.FC = () => {\n  const todos = useSelector(getTodos);\n\n  useEffect(() => {\n  }, [todos]);\n\n  return (\n    <ul className=\"todos__list is-flex is-flex-wrap-wrap is-justify-content-center\">\n      {todos.map((todo) => (\n        <Todo key={todo.id} todo={todo} />\n      ))}\n    </ul>\n  );\n};\n\nexport default TodoList;\n","const BASE_URL = 'https://jsonplaceholder.typicode.com';\n\nexport const getTodosFromServer = async () => {\n  const todosFromServer = await fetch(`${BASE_URL}/todos`);\n\n  return todosFromServer.json();\n};\n\nexport const getUsersFromServer = async () => {\n  const usersFromServer = await fetch(`${BASE_URL}/users`);\n\n  return usersFromServer.json();\n};\n","/* eslint-disable comma-dangle */\n/* eslint-disable jsx-a11y/label-has-associated-control */\n/* eslint-disable react/jsx-one-expression-per-line */\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport './App.scss';\nimport classNames from 'classnames';\nimport { setTodos, setUsers } from './store/actions';\nimport TodoList from './components/TodoList/TodoList';\nimport { getTodosFromServer, getUsersFromServer } from './api/api';\nimport { getTodos, getUsers } from './store/selectors';\n// eslint-disable-next-line import/extensions, import/no-unresolved\nimport { TodoItem } from './react-app-env';\n\nconst App: React.FC = () => {\n  const dispatch = useDispatch();\n  const todos = useSelector(getTodos);\n  const users = useSelector(getUsers);\n  const [name, setName] = useState<string>('');\n  const [completed, setCompleted] = useState<boolean>(false);\n  const [title, setTitle] = useState<string>('');\n  const [formAddToggler, setFormAddToggler] = useState(false);\n\n  const date = new Date().toUTCString().toString();\n\n  const getAllTodos = async () => {\n    const todosFromServer = await getTodosFromServer();\n\n    dispatch(\n      setTodos(\n        todosFromServer.map((todoitem: TodoItem) => {\n          return { ...todoitem, date };\n        })\n      )\n    );\n  };\n\n  const getAllUsers = async () => {\n    const usersFromServer = await getUsersFromServer();\n\n    dispatch(setUsers(usersFromServer));\n  };\n\n  const addTodo = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const datetime = new Date().toUTCString().toString();\n    const userInside = users.find((user) => user.name === name);\n    const newUser = { name, id: users.length + 1 };\n\n    if (userInside !== undefined) {\n      dispatch(\n        setTodos([\n          ...todos,\n          {\n            title,\n            userId: userInside.id,\n            id: todos.length + 1,\n            date: datetime,\n            completed,\n          },\n        ])\n      );\n    } else {\n      dispatch(setUsers([...users, newUser]));\n      dispatch(\n        setTodos([\n          ...todos,\n          {\n            title,\n            userId: newUser.id,\n            id: todos.length + 1,\n            date: datetime,\n            completed,\n          },\n        ])\n      );\n    }\n\n    setCompleted(false);\n    setTitle('');\n    setName('');\n    setFormAddToggler(false);\n  };\n\n  useEffect(() => {\n    getAllTodos();\n    getAllUsers();\n  }, []);\n\n  return (\n    <main className=\"todos\">\n      <div className=\"is-flex is-four-fifths column is-justify-content-space-between is-align-content-space-between\">\n        <h1 className=\"title is-3 m-3\">Tsukat test task(todolist)</h1>{' '}\n        <form\n          onSubmit={(event) => addTodo(event)}\n          className={classNames('todos__form-add', {\n            'todos__form-add--unactive': formAddToggler === false,\n          })}\n        >\n          <div className=\"is-flex is-justify-content-space-between\">\n            <h2>Create new todo</h2>{' '}\n            <button\n              className=\"todos__form-add__close\"\n              type=\"button\"\n              onClick={() => setFormAddToggler(false)}\n            >\n              Close\n            </button>\n          </div>\n          <label>\n            {' '}\n            Enter the name\n            <input\n              className=\"input is-info\"\n              type=\"text\"\n              placeholder=\"Enter the name\"\n              value={name}\n              onChange={(event) => setName(event.target.value)}\n              required\n            />\n          </label>\n          <label>\n            {' '}\n            Enter the todo\n            <input\n              className=\"input is-info\"\n              type=\"text\"\n              placeholder=\"Enter the todo\"\n              value={title}\n              onChange={(event) => setTitle(event.target.value)}\n              required\n            />\n          </label>\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={completed}\n              onChange={() => setCompleted(!completed)}\n            />{' '}\n            Completed\n          </label>\n          <button\n            className=\"todos__form-add__submit button is-success is-light\"\n            type=\"submit\"\n          >\n            Submit\n          </button>\n        </form>\n        <div className=\"todos__add-button__box m-3\">\n          <p>\n            <b>Add todo &#8658; </b>\n          </p>\n          <button\n            className=\"todos__add m-1\"\n            type=\"button\"\n            onClick={() => setFormAddToggler(!formAddToggler)}\n          >\n            add\n          </button>\n        </div>\n      </div>\n      <TodoList />\n    </main>\n  );\n};\n\nexport default App;\n","/* eslint-disable import/extensions */\nimport { configureStore, createReducer } from '@reduxjs/toolkit';\nimport { setTodos, setUsers } from './actions';\n// eslint-disable-next-line import/no-unresolved\nimport { State } from '../react-app-env';\n\nconst initialState: State = {\n  todos: [],\n  users: [],\n};\n\nconst reducer = createReducer(initialState, (builder) => {\n  builder.addCase(setTodos, (state, action) => {\n    state.todos = action.payload;\n  });\n  builder.addCase(setUsers, (state, action) => {\n    state.users = action.payload;\n  });\n});\n\nexport const store = configureStore({ reducer });\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport { store } from './store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}